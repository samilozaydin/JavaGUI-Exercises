/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Lab12;

import java.awt.Color;
import java.util.List;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Bilal
 */
public class frm_quest1 extends javax.swing.JFrame {

    DefaultTreeModel model;

    /**
     * Creates new form frm_quest1
     */
    public frm_quest1() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JTree();
        btn_recursively = new javax.swing.JButton();
        btn_Unrec = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        list.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(list);

        btn_recursively.setText("Create recursively");
        btn_recursively.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_recursivelyActionPerformed(evt);
            }
        });

        btn_Unrec.setText("Create Unrecursively");
        btn_Unrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UnrecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_recursively, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btn_Unrec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_recursively)
                    .addComponent(btn_Unrec))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_recursivelyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_recursivelyActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.showDialog(this.rootPane, "Select");
        tree(fc.getSelectedFile().getAbsolutePath());

    }//GEN-LAST:event_btn_recursivelyActionPerformed

    private void btn_UnrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UnrecActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.showDialog(this.rootPane, "Select");
        tree2(fc.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_btn_UnrecActionPerformed
    public void tree2(String rootPath) {

        File rootFile = new File(rootPath);
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootFile.getName());
        this.model = new DefaultTreeModel(rootNode);
        list.setModel(model);
        unrecursive(rootPath, rootNode);

    }

    public void unrecursive(String path, DefaultMutableTreeNode nodes) {
        File file = new File(path);
        File[] files = file.listFiles();
        ArrayList<DefaultMutableTreeNode> arNode = new ArrayList<>();
        ArrayList<File[]> arFile = new ArrayList();
        while (files == null) {
            return;
        }

        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                DefaultMutableTreeNode nnode = new DefaultMutableTreeNode(files[i].getName());
                nodes.add(nnode);
                File[] nfile = files[i].listFiles();
                arFile.add(nfile);
                arNode.add(nnode);
            } else if (files[i].isFile()) {
                DefaultMutableTreeNode newnode = new DefaultMutableTreeNode(files[i].getName());
                nodes.add(newnode);
            }
        }
        
        int i = 0;
        int j = 0;
        while (arFile.get(i) != null) {
            if (arFile.get(i).length == j) {
                j = 0;
                i++;
                if (arFile.size() == i) {
                    break;
                }
                continue;
            }

            if (arFile.get(i)[j].isDirectory()) {
                DefaultMutableTreeNode nnode = new DefaultMutableTreeNode(arFile.get(i)[j].getName());
                arNode.get(i).add(nnode);
                File[] nfile = arFile.get(i)[j].listFiles();

                arFile.add(nfile);
                arNode.add(nnode);
            } else if (arFile.get(i)[j].isFile()) {
                DefaultMutableTreeNode newnode = new DefaultMutableTreeNode(arFile.get(i)[j].getName());
                arNode.get(i).add(newnode);
            }
            j++;
        }

    }

    public void tree(String rootPath) {

        File rootFile = new File(rootPath);
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootFile.getName());
        this.model = new DefaultTreeModel(rootNode);
        list.setModel(model);
        recursive(rootPath, rootNode);

    }

    public void recursive(String path, DefaultMutableTreeNode nodes) {
        File file = new File(path);
        File[] files = file.listFiles();
        while (files == null) {
            return;
        }
        for (File oneFile : files) {
            if (oneFile.isDirectory()) {
                DefaultMutableTreeNode nnode = new DefaultMutableTreeNode(oneFile.getName());
                nodes.add(nnode);
                recursive(oneFile.getAbsolutePath(), nnode);
            } else if (oneFile.isFile()) {
                DefaultMutableTreeNode nnode = new DefaultMutableTreeNode(oneFile.getName());
                nodes.add(nnode);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_quest1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_quest1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_quest1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_quest1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_quest1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Unrec;
    private javax.swing.JButton btn_recursively;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree list;
    // End of variables declaration//GEN-END:variables
}
